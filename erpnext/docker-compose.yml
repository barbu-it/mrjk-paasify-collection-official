
networks:
  backend:

x-paasify:
  init2: >
    docker compose --project-name $app_slug --file ../erpnext/docker-compose.run.yml run -ti   backend bench new-site $app_fqdn --no-mariadb-socket --mariadb-root-password $app_db_admin_pass  --admin-password $app_admin_pass --db-name $app_db_name --db-password $app_db_pass --db-type mariadb --db-host db --verbose --install-app erpnext
  init1: >
    docker compose --project-name $app_slug --file ../erpnext/docker-compose.run.yml run -ti   backend bench new-site $app_fqdn --no-mariadb-socket --mariadb-root-password $app_db_admin_pass  --admin-password $app_admin_pass --db-type mariadb --db-host db --verbose --install-app erpnext,wiki,whitelabel,it_management,contract_payment,hr_addon,frappe_system_monitor,print_designer,banking,recapp
  add_app_wiki: >
    docker compose --project-name $app_slug --file ../erpnext/docker-compose.run.yml run -ti   backend bench get-app https://github.com/frappe/wiki ; 
    docker compose --project-name $app_slug --file ../erpnext/docker-compose.run.yml run -ti   backend bench 
    --site $app_fqdn install-app wiki
    


  # hrms, helpdesk erpnext_telegram_integration, insights, 
  default:
    admin: Administrator
    pass: $app_admin_pass

  permission:
    - chmod 777 data/*
    - touch data/apps.txt
    - touch data/common_site_config.json


x-customizable-image: &customizable_image
  # By default the image used only contains the `frappe` and `erpnext` apps.
  # See https://github.com/frappe/frappe_docker/blob/main/docs/custom-apps.md
  # about using custom images.
  image: ${app_image:-${app_image_name}:${app_image_version}}

x-depends-on-configurator: &depends_on_configurator
  depends_on:
    configurator:
      condition: service_completed_successfully

x-backend-defaults: &backend_defaults
  <<: [*depends_on_configurator, *customizable_image]
  volumes:
    - $app_dir_data:/home/frappe/frappe-bench/sites
  networks:
    backend:

services:

  frontend:
    <<: *customizable_image
    command:
      - nginx-entrypoint.sh
    environment:
      BACKEND: backend:8000
      SOCKETIO: websocket:9000
      FRAPPE_SITE_NAME_HEADER: ${FRAPPE_SITE_NAME_HEADER:-$$host}
      UPSTREAM_REAL_IP_ADDRESS: ${UPSTREAM_REAL_IP_ADDRESS:-127.0.0.1}
      UPSTREAM_REAL_IP_HEADER: ${UPSTREAM_REAL_IP_HEADER:-X-Forwarded-For}
      UPSTREAM_REAL_IP_RECURSIVE: ${UPSTREAM_REAL_IP_RECURSIVE:-off}
      PROXY_READ_TIMOUT: ${PROXY_READ_TIMOUT:-120}
      CLIENT_MAX_BODY_SIZE: ${CLIENT_MAX_BODY_SIZE:-50m}
    volumes:
      - $app_dir_data:/home/frappe/frappe-bench/sites
    depends_on:
      - backend
      - websocket
    networks:
      backend:
        
  backend:
    <<: *backend_defaults


  configurator:
    <<: *backend_defaults
    entrypoint:
      - bash
      - -c
    command:
      - >
        ls -1 apps > sites/apps.txt;
        bench set-config -g db_host $$DB_HOST;
        bench set-config -gp db_port $$DB_PORT;
        bench set-config -g redis_cache "redis://$$REDIS_CACHE";
        bench set-config -g redis_queue "redis://$$REDIS_QUEUE";
        bench set-config -g redis_socketio "redis://$$REDIS_SOCKETIO";
        bench set-config -gp socketio_port $$SOCKETIO_PORT;
        [[ -d "sites/$app_fqdn" ]] || bench new-site $app_fqdn --no-mariadb-socket --mariadb-root-password $app_db_admin_pass  --admin-password $app_admin_pass admin --db-type mariadb --db-host db --db-name $app_db_name --db-password $app_db_pass --verbose --install-app erpnext;
    environment:
      DB_HOST: $app_db_host
      DB_PORT: $app_db_port
      REDIS_CACHE: redis-cache:6379
      REDIS_QUEUE: redis-queue:6379
      REDIS_SOCKETIO: redis-socketio:6379
      SOCKETIO_PORT: 9000
    depends_on: {}


  websocket:
    <<: [*depends_on_configurator, *customizable_image]
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js
    volumes:
      - $app_dir_data:/home/frappe/frappe-bench/sites
    networks:
      backend:

  queue-short:
    <<: *backend_defaults
    command: bench worker --queue short

  queue-default:
    <<: *backend_defaults
    command: bench worker --queue default

  queue-long:
    <<: *backend_defaults
    command: bench worker --queue long

  scheduler:
    <<: *backend_defaults
    command: bench schedule

